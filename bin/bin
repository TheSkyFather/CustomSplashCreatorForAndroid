#    Xiaomi СustomSplashCreator
#    Copyright (C) 2022 by TheSkyFather
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

import zipfile
import os
from os import system
import time
import shutil
from struct import *
import argparse, os 

def menu():  
    def first():
        while True:
            print('---')
            print('Выбрано действие - Создание прошиваемого архива:')    
            print(' Процесс создания: 1%')
            time.sleep(0.3)
            print(' Процесс создания: 26%')
            time.sleep(0.3)
            print(' Процесс создания: 84%')
            offset0 = 0x4000
            offset1 = 0x5000
            offset2 = 0x770000
            offset3 = 0xEDB000
            offset4 = 0x1646000
            outpt = open('logo.img', 'wb')

            emptyContent =  [0 for i in range(0x1CF5000)]
            pocof3offset = [0x4C, 0x4F, 0x47, 0x4F, 0x21,            0x21,        0x21, 0x21, 0x05, 0x00, 0x00, 0x00,
            0x6B, 0x07, 0x00, 0x00, 0x70, 0x07, 0x00, 0x00,       0x6B, 0x07, 0x00, 0x00,
            0xDB, 0x0E, 0x00, 0x00, 0x6B, 0x07, 0x00, 0x00,       0x46, 0x16, 0x00, 0x00,
            0x6B, 0x07]
    
            outpt.write(bytearray(emptyContent))
            outpt.seek(offset0)
            outpt.write(bytearray(pocof3offset))
            outpt.seek(offset1)
            img = open('pics/0.bmp', 'rb')
            outpt.write(img.read())
            outpt.seek(offset2)
            img = open('pics/1.bmp', 'rb')
            outpt.write(img.read())
            outpt.seek(offset3)
            img = open('pics/2.bmp', 'rb')
            outpt.write(img.read())
            outpt.seek(offset4)
            img = open('pics/3.bmp', 'rb')
            outpt.write(img.read())
            outpt.close()
    
            shutil.copy('bin/pattern.zip', 'output/CustomSplash.zip')     
            z = zipfile.ZipFile('output/CustomSplash.zip', 'a', zipfile.ZIP_DEFLATED)
            z.write('logo.img')
            z.close()
            os.remove('logo.img')
            print(' Процесс создания: 100%')
            print('Создание завершено. Архив помещён в папку output.')  
            print('---')   
            while True:
                ch = input('1.Вернуться в главное меню.\n2.Выход\n---\n>>> ') 
                if ch == '2':
                    print('Выход...')
                    exit()
                elif ch == '1':
                    os.system('cls||clear')
                    return
                else:
                    os.system('cls||clear')
                    print('#------------------------------------------------#\n#          Xiaomi Custom Splash Creator          #\n#                By TheSkyFather                 #\n#              vk.com/theskyfather               #\n#     t.me/@trololololololololololololololo9     #\n#------------------------------------------------#\n---\n1.Создать прошиваемый архив.\n2.Собрать logo.img\n3.Разобрать logo.img\n4.Выход\n---\n>>> 1')
                    print('---')
                    print('Выбрано действие - Создание прошиваемого архива:')    
                    print(' Процесс создания: 1%')
                    print(' Процесс создания: 26%')
                    print(' Процесс создания: 84%')
                    print(' Процесс создания: 100%')
                    print('Создание завершено. Архив помещён в папку output.')  
                    print('---')   
                    print('Введено неверное значение. Повторите попытку.')
                    continue

    def second():
        while True:
            print('---')
            print('Выбрано действие - Сборка logo.img:')
            print(' Процесс сборки: 1%')
            time.sleep(0.3)
            print(' Процесс сборки: 39%')
            time.sleep(0.3)
            print(' Процесс сборки: 71%') 
            offset0 = 0x4000
            offset1 = 0x5000
            offset2 = 0x770000
            offset3 = 0xEDB000
            offset4 = 0x1646000
            outpt = open('output/logo.img', 'wb')

            emptyContent =  [0 for i in range(0x1CF5000)]
            pocof3offset = [0x4C, 0x4F, 0x47, 0x4F, 0x21,            0x21,        0x21, 0x21, 0x05, 0x00, 0x00, 0x00,
            0x6B, 0x07, 0x00, 0x00, 0x70, 0x07, 0x00, 0x00,       0x6B, 0x07, 0x00, 0x00,
            0xDB, 0x0E, 0x00, 0x00, 0x6B, 0x07, 0x00, 0x00,       0x46, 0x16, 0x00, 0x00,
            0x6B, 0x07]

            outpt.write(bytearray(emptyContent))
            outpt.seek(offset0)
            outpt.write(bytearray(pocof3offset))
            outpt.seek(offset1)
            img = open('pics/0.bmp', 'rb')
            outpt.write(img.read())
            outpt.seek(offset2)
            img = open('pics/1.bmp', 'rb')
            outpt.write(img.read())
            outpt.seek(offset3)
            img = open('pics/2.bmp', 'rb')
            outpt.write(img.read())
            outpt.seek(offset4)
            img = open('pics/3.bmp', 'rb')
            outpt.write(img.read())
            outpt.close()
            print(' Процесс сборки: 100%')  
            time.sleep(0.3)
            print('Сборка завершена. Файл logo.img создан в папке output.')
            print('---')
            while True:
                ch = input('1.Вернуться в главное меню.\n2.Выход\n---\n>>> ') 
                if ch == '2':
                    print('Выход...')
                    exit()
                elif ch == '1':
                    os.system('cls||clear')
                    return
                else:
                    os.system('cls||clear')
                    print('#------------------------------------------------#\n#          Xiaomi Custom Splash Creator          #\n#                By TheSkyFather                 #\n#              vk.com/theskyfather               #\n#     t.me/@trololololololololololololololo9     #\n#------------------------------------------------#\n---\n1.Создать прошиваемый архив.\n2.Собрать logo.img\n3.Разобрать logo.img\n4.Выход\n---\n>>> 2')
                    print('---')
                    print('Выбрано действие - Сборка logo.img:')    
                    print(' Процесс сборки: 1%')
                    print(' Процесс сборки: 39%')
                    print(' Процесс сборки: 71%')
                    print(' Процесс сборки: 100%')
                    print('Сборка завершена. Файл logo.img создан в папке output.')  
                    print('---')   
                    print('Введено неверное значение. Повторите попытку.')
                    continue
                    os.system('cls||clear')

    def third():  
        print('---')
        print('Выбрано действие - Декомпиляция logo.img:')
        print(' Процесс декомпиляции: 1%')
        time.sleep(0.3)
        print(' Процесс декомпиляции: 39%')
        time.sleep(0.3)
        print(' Процесс декомпиляции: 71%') 
        time.sleep(0.3)
        print(' Процесс декомпиляции: 100%')
        print('Декомпиляция завершена. Картинки помещены в папку decompiled.')   
        print('---')
        HEADER = b'LOGO!!!!'
        BMP_HEADER = b'BM'

        def check_header(f):
            f.seek(0x4000)
            (header,) = unpack("<8s", f.read(8))
            if header != HEADER:
                print("wrong header", header)
                raise ValueError("Wrong Header")

        def get_offsets(f):
            img_offset = 0
            img_offsets = []
            f.seek(0x4008)

            while True:
                last_offset = img_offset
                (img_offset,) = unpack("<I", f.read(4))
                if img_offset == 0:
                    break
                else:
                    if (img_offset + last_offset) * 0x1000 in img_offsets:
                        continue
                    img_offsets.append((img_offset + last_offset) * 0x1000)
            img_offsets.pop()
            return img_offsets

        def extract(f):
            check_header(f)

            img_offsets = get_offsets(f)
            img_cnt = 0
            for img_offset in img_offsets:
                img_cnt += 1
                f.seek(img_offset)
                (header, size) = unpack("<2sI", f.read(6))
                if header != BMP_HEADER:
                    print('corrupt bmp header skipping')
                    continue
                f.seek(img_offset)
                yield f.read(size)

        def edit(orig_imgs, new_imgs):
            binary = bytearray(orig_imgs.read())
            check_header(orig_imgs)

            img_offsets = get_offsets(orig_imgs)

            if len(img_offsets) != len(new_imgs):
                raise ValueError("All images must be replaced")

            img_cnt = 0
            lens = []
            for img_offset in img_offsets:
                (header, size) = unpack("<2sI", binary[img_offset:img_offset+6])
                if header != BMP_HEADER:
                    print('corrupt bmp header skipping')
                    continue
                next_img = img_offsets[img_cnt+1]-1 if img_cnt+1 < len(img_offsets) else len(binary)
                if len(new_imgs[img_cnt])+img_offset >= next_img:
                    print(next_img, len(new_imgs[img_cnt]), img_offset)
                    raise ValueError("Image too big; data overlaps with next image")
                (header, size) = unpack("<2sI", new_imgs[img_cnt][:6])
                if header != BMP_HEADER:
                    raise ValueError('cannot add corrupt bmp header')
                if size != len(new_imgs[img_cnt]):
                    raise ValueError("Won't add image that lies about size, who knows what would happen")
                    
                binary[img_offset:img_offset+size] = new_imgs[img_cnt]

                img_cnt += 1

            return binary

        def main():
            parser = argparse.ArgumentParser()

            subparsers = parser.add_subparsers(required=True)

            parser_extract = subparsers.add_parser("extract")
            parser_extract.add_argument("-i", "--input", dest='input', action='store', type=argparse.FileType('rb'), required=True)
            parser_extract.add_argument("-o", "--output", dest='output', action='store', type=str, required=True)
            parser_extract.set_defaults(func=extract_logo)

            parser_replace = subparsers.add_parser("replace")
            parser_replace.add_argument("-i", "--input",dest='input', action='store', type=argparse.FileType('rb'), required=True)
            parser_replace.add_argument("-a", "--image", dest='images', action='append', type=argparse.FileType('rb'), required=True)
            parser_replace.add_argument("-o", "--output", dest='output', action='store', type=argparse.FileType('wb'), required=True)
            parser_replace.set_defaults(func=replace_logo)
            args = vars(parser.parse_args())
            print(args.pop("func")(**args))
        def extract_logo(input, output):
            os.makedirs(output, exist_ok=True)
            c = 0
            for photo in extract(input):
                f = open(os.path.join(output, ""+str(c)+".bmp"), "wb")
                f.write(photo)
                f.close()
                c += 1

        def replace_logo(input, images, output):
            out = edit(input, [i.read() for i in images])
            output.write(out)
            output.close()

        if __name__ == "__main__":
            main()
            while True:
                ch = input('1.Вернуться в главное меню.\n2.Выход\n---\n>>> ') 
                if ch == '2':
                    print('Выход...')
                    exit()
                elif ch == '1':
                    os.system('cls||clear')
                    return
                else:
                    os.system('cls||clear')
                    print('#------------------------------------------------#\n#          Xiaomi Custom Splash Creator          #\n#                By TheSkyFather                 #\n#              vk.com/theskyfather               #\n#     t.me/@trololololololololololololololo9     #\n#------------------------------------------------#\n---\n1.Создать прошиваемый архив.\n2.Собрать logo.img\n3.Разобрать logo.img\n4.Выход\n---\n>>> 3')
                    print('---')
                    print('Выбрано действие - Декомпиляция logo.img:')    
                    print(' Процесс декомпиляции: 1%')
                    print(' Процесс декомпиляции: 39%')
                    print(' Процесс декомпиляции: 71%')
                    print(' Процесс декомпиляции: 100%')
                    print('Декомпиляция завершена. Картинки помещены в папку decompiled.')  
                    print('---')   
                    print('Введено неверное значение. Повторите попытку.')
                    continue
                    os.system('cls||clear')

    while True:  
        ch = input("#------------------------------------------------#\n#          Xiaomi Custom Splash Creator          #\n#                By TheSkyFather                 #\n#              vk.com/theskyfather               #\n#     t.me/@trololololololololololololololo9     #\n#------------------------------------------------#\n---\n1.Создать прошиваемый архив.\n2.Собрать logo.img\n3.Разобрать logo.img\n4.Выход\n---\n>>> ")
        
        if ch == '1':
            first()
        elif ch == '2':
            second()
        if ch == '3':
            third()    
        if ch == '4':
            print('Выход...')
            quit()
        else: 
            while True: 
                os.system('cls||clear')
                break
menu()